pragma solidity ^0.5.0;

import "./PupperCoin.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/Crowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/emission/MintedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/validation/CappedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/validation/TimedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/distribution/RefundablePostDeliveryCrowdsale.sol";

contract PupperCoinCrowdSale is Crowdsale, MintedCrowdsale, CappedCrowdsale, TimedCrowdsale, RefundablePostDeliveryCrowdsale {
    
    uint public time = now;
    async function time.latest();
    
    constructor(
        uint rate,
        address payable wallet,
        PupperCoin token,
        uint openingTime,
        uint closingTime,
        uint cap,
        uint goal
    )
        CappedCrowdsale(cap) // should be cap or goal?
        TimedCrowdsale(openingTime, closingTime)        
        RefundableCrowdsale(goal)
        RefundablePostDeliveryCrowdsale()
        Crowdsale(rate, wallet, token)
        public
    {
        // constructor can stay empty
    }
}

contract PupperCoinCrowdsaleDeployer {

    address public token_sale_address;
    address public token_address;
    // uint public fakenow = now;
    
    constructor(
        string memory name,
        string memory symbol,
        // uint initial_supply,
        address payable wallet,
        uint cap,
        // uint openingTime,
        // uint closingTime,
        uint goal
    )
        public
    {
        PupperCoin token = new PupperCoin(name, symbol, 0);
        token_address = address(token);
        
        PupperCoinCrowdSale token_sale = new PupperCoinCrowdSale(1, wallet, token, now, now + 24 weeks, cap, goal);
        token_sale_address = address(token_sale);
        
        // make the PupperCoinSale contract a minter, then have the PupperCoinSaleDeployer renounce its minter role
        token.addMinter(token_sale_address);
        token.renounceMinter();
    }
}